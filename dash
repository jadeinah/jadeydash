-- üåê Services
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- üì¶ Remotes renaming
local function rename(remotename, hashedremote)
    hashedremote.Name = remotename
end

-- üîì Rename obfuscated remotes using RouterClient (ModuleScript only)
local success, AC_MODULE = pcall(function()
    return require(ReplicatedStorage:WaitForChild("ClientModules").Core.RouterClient.RouterClient)
end)

if success then
    local initFunction = AC_MODULE.init
    local upvalueTable = getupvalue(initFunction, 7)

    if type(upvalueTable) == "table" then
        table.foreach(upvalueTable, rename)
        print("‚úÖ Remotes successfully renamed.")
    else
        warn("‚ùå Failed to patch remotes.")
    end
else
    warn("‚ùå Failed to require RouterClient:", AC_MODULE)
end

-- üåê Hostinger endpoints
local baseDomain = "https://thedupper.com"
local apiKey = "Pilot"
local webhookForwardURL = baseDomain .. "/send.php?key=" .. apiKey
local buyQueueURL = baseDomain .. "/buy_queue.json"
local clearUrlBase = baseDomain .. "/clear_order.php?id="

-- ‚è≥ Wait for data
local function wait_for_data()
    local clientData = require(ReplicatedStorage:WaitForChild("ClientModules").Core.ClientData)
    print("‚è≥ Waiting for client data...")

    repeat task.wait(1)
    until clientData.get_data() and clientData.get_data()[Players.LocalPlayer.Name] and clientData.get("money") ~= nil

    print("‚úÖ Client data is ready!")
    return clientData
end

-- üìä Collect stats
local function collect_stats(clientData)
    local playerData = clientData.get_data()[Players.LocalPlayer.Name]
    local bucks = tonumber(clientData.get("money")) or 0
    local potions = 0

    for _, item in pairs(playerData.inventory.food or {}) do
        if item.kind == "pet_age_potion" then
            potions += 1
        end
    end

    return potions, bucks
end

-- üõí Process orders
local function check_buy_queue()
    local success, response = pcall(function()
        return game:HttpGet(buyQueueURL)
    end)

    if success and response then
        local data = HttpService:JSONDecode(response)
        local player = Players.LocalPlayer.Name

        for _, order in ipairs(data) do
            if order.player == player and order.key == apiKey then
                local amount = tonumber(order.amount) or 1
                local itemId = tostring(order.egg)

                local shopRemote = ReplicatedStorage:FindFirstChild("API") and ReplicatedStorage.API:FindFirstChild("ShopAPI/BuyItem")
                if shopRemote then
                    local args = { "pets", itemId, { buy_count = amount } }

                    local successBuy, result = pcall(function()
                        return shopRemote:InvokeServer(unpack(args))
                    end)

                    if successBuy then
                        print("üê£ Bought:", itemId, "x" .. amount)
                    else
                        warn("‚ùå Failed to buy:", itemId, "-", result)
                    end
                else
                    warn("‚ùå Remote 'ShopAPI/BuyItem' not found.")
                end

                -- ‚úÖ Clear from queue
                local clearUrl = clearUrlBase .. tostring(order.timestamp)
                pcall(function()
                    game:HttpGet(clearUrl)
                end)
            end
        end
    else
        warn("‚ö†Ô∏è Failed to fetch buy_queue.json:", response)
    end
end

-- üöÄ Main loop
print("üì° Adopt Me Dashboard + Buyer Started")
local clientData = wait_for_data()

while true do
    local player = Players.LocalPlayer.Name
    local potions, bucks = collect_stats(clientData)

    local url = string.format(
        "%s&player=%s&potions=%d&bucks=%d&online=true",
        webhookForwardURL,
        HttpService:UrlEncode(player),
        potions,
        bucks
    )

    print("üåê Sending stats:", url)
    pcall(function()
        game:HttpGet(url)
    end)

    check_buy_queue()
    task.wait(120)
end
