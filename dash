local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local webhookForwardURL = "http://192.168.100.2:4241/send"
local buyQueueURL = "http://192.168.100.2:4241/buy_queue.json"
local apiKey = "Pilot"

-- Wait for Adopt Me client data to load
local function wait_for_data()
	local clientData = require(ReplicatedStorage:WaitForChild("ClientModules").Core.ClientData)
	print("‚è≥ Waiting for client data...")

	repeat task.wait(1)
	until clientData.get_data() and clientData.get_data()[Players.LocalPlayer.Name] 
	       and clientData.get("money") ~= nil

	print("‚úÖ Client data is ready!")
	return clientData
end

-- Collect stats
local function collect_stats(clientData)
	local playerData = clientData.get_data()[Players.LocalPlayer.Name]
	local bucks = tonumber(clientData.get("money")) or 0
	local potions = 0

	for _, item in pairs(playerData.inventory.food or {}) do
		if item.kind == "pet_age_potion" then
			potions += 1
		end
	end

	return potions, bucks
end

-- üõí Buy egg(s) if there's a matching queue entry
local function check_buy_queue()
	local success, response = pcall(function()
		return HttpService:GetAsync(buyQueueURL)
	end)

	if success and response then
		local orders = HttpService:JSONDecode(response)
		local player = Players.LocalPlayer.Name

		for _, order in ipairs(orders) do
			if order.player == player and order.key == apiKey then
				local amount = tonumber(order.amount) or 1
				local eggName = tostring(order.egg)

				local Remote = ReplicatedStorage:FindFirstChild("BuyItem")
				if Remote then
					for i = 1, amount do
						pcall(function()
							Remote:InvokeServer(eggName)
							print("üê£ Bought egg:", eggName)
						end)
						task.wait(0.5)
					end
				end
			end
		end
	end
end

-- ‚úÖ Start
print("üì° Adopt Me Stats Uploader + Auto Buyer Started")
local clientData = wait_for_data()

-- Loop: send stats + check buy requests every 2 minutes
while true do
	local player = Players.LocalPlayer.Name
	local potions, bucks = collect_stats(clientData)

	local url = string.format(
		"%s?key=%s&player=%s&potions=%d&bucks=%d&online=true",
		webhookForwardURL,
		HttpService:UrlEncode(apiKey),
		HttpService:UrlEncode(player),
		potions,
		bucks
	)

	print("üåê Sending stats:", url)

	local success, response = pcall(function()
		return game:HttpGet(url)
	end)

	if success then
		print("‚úÖ Stats sent successfully!")
	else
		warn("‚ùå Failed to send stats:", response)
	end

	-- üõí Check for buy orders
	check_buy_queue()

	task.wait(120)
end
