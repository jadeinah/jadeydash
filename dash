local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local webhookForwardURL = "http://192.168.100.2:4241/send"

-- Wait for Adopt Me client data to load
local function wait_for_data()
	local clientData = require(ReplicatedStorage:WaitForChild("ClientModules").Core.ClientData)
	print("‚è≥ Waiting for client data...")

	repeat task.wait(1)
	until clientData.get_data() and clientData.get_data()[Players.LocalPlayer.Name] 
	       and clientData.get("money") ~= nil

	print("‚úÖ Client data is ready!")
	return clientData
end

-- Collect bucks and pet_age_potion
local function collect_stats(clientData)
	local playerData = clientData.get_data()[Players.LocalPlayer.Name]
	local bucks = tonumber(clientData.get("money")) or 0
	local potions = 0

	for _, item in pairs(playerData.inventory.food or {}) do
		if item.kind == "pet_age_potion" then
			potions += 1
		end
	end

	return potions, bucks
end

print("üì° Adopt Me Stats Uploader Started")

local clientData = wait_for_data()

while true do
	local player = Players.LocalPlayer.Name
	local potions, bucks = collect_stats(clientData)

	-- ‚úÖ Added online=true
	local url = string.format(
		"%s?player=%s&potions=%d&bucks=%d&online=true",
		webhookForwardURL,
		HttpService:UrlEncode(player),
		potions,
		bucks
	)

	print("üåê Sending stats:", url)

	local success, response = pcall(function()
		return game:HttpGet(url)
	end)

	if success then
		print("‚úÖ Stats sent successfully!")
	else
		warn("‚ùå Failed to send stats:", response)
	end

	task.wait(120) -- ‚è± Update every hour
end
